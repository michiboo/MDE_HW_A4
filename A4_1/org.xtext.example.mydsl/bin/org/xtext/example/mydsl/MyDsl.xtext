// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "https://cryptoExchangePackage/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

cryptoExchange returns cryptoExchange:
	'cryptoExchange'
	name=EString
	'{'
		('IP' IP=EString)?
		('DomainName' DomainName=EString)?
		'SubSystem' '{' SubSystem+=SubSystem ( "," SubSystem+=SubSystem)* '}' 
		'Tokens' '{' Tokens+=Token ( "," Tokens+=Token)* '}' 
		'TokenNetworks' '{' TokenNetworks+=TokenNetwork ( "," TokenNetworks+=TokenNetwork)* '}' 
	'}';










EString returns ecore::EString:
	STRING | ID;

SubSystem returns SubSystem:
	{SubSystem}
	'SubSystem'
	name=SubSystemName
	'{'
		('accounts' '{' accounts+=Account ( "," accounts+=Account)* '}' )?
		('TokenPairs' '{' TokenPairs+=TokenPair ( "," TokenPairs+=TokenPair)* '}' )?
		('Orders' '{' Orders+=Order ( "," Orders+=Order)* '}' )?
		('SavingOrders' '{' SavingOrders+=SavingOrder ( "," SavingOrders+=SavingOrder)* '}' )?
	'}';

Token returns Token:
	'Token'
	name=EString
	'{'
		('address' address=EString)?
		'decimal' decimal=EInt
		'TokenNetwork' TokenNetwork=[TokenNetwork|EString]
	'}';

TokenNetwork returns TokenNetwork:
	'TokenNetwork'
	name=EString
	'{'
		'chainID' chainID=EInt
		('RPC' RPC=EString)?
	'}';

enum SubSystemName returns SubSystemName:
				Spot = 'Spot' | Future = 'Future' | Margin = 'Margin' | Saving = 'Saving';

Account returns Account:
	{Account}
	'Account'
	'{'
		('TokensBalance' '{' TokensBalance+=TokenBalance ( "," TokensBalance+=TokenBalance)* '}' )?
		('transferRequest' '{' transferRequest+=TransferRequest ( "," transferRequest+=TransferRequest)* '}' )?
	'}';

TokenPair returns TokenPair:
	'TokenPair'
	'{'
		'price' price=EFloat
		'TokenA' TokenA=[Token|EString]
		'TokenB' TokenB=[Token|EString]
	'}';

Order returns Order:
	'Order'
	'{'
		'Price' Price=EFloat
		'Amount' Amount=EFloat
		('leverage' leverage=LeverageType)?
		('Type' Type=OrderType)?
		'account' account=[Account|EString]
		'TokenPair' TokenPair=[TokenPair|EString]
	'}';

SavingOrder returns SavingOrder:
	'SavingOrder'
	name=EString
	'{'
		'Amount' Amount=EFloat
		('MatureDate' MatureDate=EDate)?
		'Interest' Interest=EDouble
		'account' account=[Account|EString]
		'Token' Token=[Token|EString]
	'}';

TokenBalance returns TokenBalance:
	'TokenBalance'
	name=EString
	'{'
		'balance' balance=EFloat
		'Token' Token=[Token|EString]
	'}';

TransferRequest returns TransferRequest:
	'TransferRequest'
	ID=EString
	'{'
		('type' type=TransferType)?
		'amount' amount=EFloat
		'Token' Token=[Token|EString]
		'Destination' Destination=[Account|EString]
	'}';

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

enum TransferType returns TransferType:
				IntraExchange = 'IntraExchange' | ExtraExchange = 'ExtraExchange';

enum LeverageType returns LeverageType:
				_1x = '_1x' | _2x = '_2x' | _5x = '_5x' | _10x = '_10x';

enum OrderType returns OrderType:
				buy = 'buy' | sell = 'sell' | leverageLong = 'leverageLong' | leverageShort = 'leverageShort';

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;
